'''
list(列表)相关的内置函数
len()
计算列表的长度，即计算列表元素的个数）
max()
返回列表元素中的最大值
min()
返回列表元素中的最小值
sum()
计算列表所有元素的和
sorted()
返回一个排序的列表，但并不改变原列表。如： sorted([3, 9, 0, 5]) --- [0, 3, 5, 9]
list()
生成一个空列表，或把其它类型数据转换成list。

any()
只要列表中有一个元素是True就返回True。
all()
只有列表所有元素为True才返回True。



append()	把一个元素加到列表的尾部	a=[1,2];a.append('a')	a变为 [1,2,'a']
insert()	把一个元素加到列表的特定位置	a=[1,2]; a.insert(1, 'c')	a变为：[1, 'c', 2]
remove()	删除第一个出现的某元素	a=[1,2]; a.remove(2)	a变为：[1]
pop()	删除并返回某个位置（索引）的元素	a=[1,2];a.pop(1)	a变为：[1]
clear()	清空列表	a=[1,2];a.clear()	a变为：[]
index()	返回遇到的第一个某值的索引，
如果列表不包含该值则抛出错误	a=[1,1,1];a.index(1)	返回0
count()	返回列表中某值的个数	a=[1,1,2];a.count(1)	返回2
sort()	对列表进行排序	a=[3,2,1];a.sort()	a变为：[1,2,3]
reverse()	将列表倒置	a=[2,1,3];a.reverse()	a变为：[3,1,2]

'''

#元组
#元组（tuple）跟列表（list）非常相似，彼此之间的差异就是元组不可改变，list是可以改变的。
#跟list的中括号不同，元组用圆括号把所有项括起来，元素之间用逗号分隔.
'''元组的索引机制跟列表完全一样，看下面的示例：
mytuple = ('a', 'b', 3, 8.9, [1,2])
mytuple[0]
'a'
mytuple[-1]
[1, 2]
'''
#因为 元组是不可修改 的，我们通过索引企图修改元素时，就会报错.
#元组的切片跟列表也是一样的的.左边缺失就是从头（0）开始，右边缺失就是后面的全部。
#元组（tuple）运算符元组的运算符跟列表也一样.

#删除整个元组 del+元组
#由于元组是不可改变的，我们就不能像列表那样，使用del来删除元组的元素。


''' #元组相关的内置函数#
len（）
计算元组的长度，即计算元组元素的个数）
max() 
返回元组元素中的长度，元组元素必须是同一类型且可比较，例如都是数字类型的，
或都是字符串，如果类型不统一就会报错
min（）
返回元组元素中的预设。元素类型要求跟max（）一样。
'''
a=(max(('a','b','1')))
print(a)

b=(min(('a','b','99999')))
print(b)
'''
sum（）
计算元组所有元素的和，其元素类型必须是 数值型 的（整数，浮点数）↓
'''
c=(sum((1,2,4)))
print(c)
'''
sorted（）
返回一个排序的列表，但并不改变原元组。和list一样
any（）
只要元组中有 一个元素 是True就返回True。
all（）
只有元组 所有元素 为True才返回True。

'''
x=(1,2,5,5,324,33,4344)
print(x.index(4344)) #返回元组中元素的索引值，在原元组里是第几个。
print(x.count(6))   #从元组中数出object的个数，3个的话输出4个。
'''
由于元组的不可改变，它的方法也比列表少了很多，只有两个：

index（v）返回第一个变量v的元素的索引。
count（v）返回变量v的元素的个数，就是原来位于元组的第几个。
'''

#循环↓
province_name_tuple= ('北京','上海','天津','广州','深圳')
for i in province_name_tuple:
    print(i)


'#Python dict(字典)'

# 创建一个空字典 dict()  d = {} ,两种都可以.
# 括号内可以放用逗号,隔开的多个键值对，键值对用冒号:隔开.

'''
 d3 = {'a': 1, 'b': 2, 'c': 3}
 print(d3)
 ----{'a': 1, 'b': 2, 'c': 3}
 d4 = {'a': 1, 'a':2, 'a':3}
 print(d4)
 ---- {'a': 3} 
 '''
 # d4的初始化中，键都是'a'，所以得到的字典只有一个键，它的值是最后一次赋值3
d3 = {'a': 1, 'b': 2, 'c': 3}
print(d3)
d1 = {}
print(d1)
d2 = dict(a=1, b=2, c=3)
print(d2)

'''
# 字典推导式（Dict Comprehension) #
类似列表推导式，我们可以通过一个for循环表达式来创建一个字典：

dd = {x: x*x for x in range(5)}
print(dd)
---{0: 0, 1: 1, 2: 4, 3: 9, 4: 16}
'''
myd = dict(a=1, b=2, c=3)
print(myd)
# ---{'a': 1, 'b': 2, 'c': 3}  
myd['a'] # 查找字典第一个，如果有的话输出，没有的话报错。

'通过get(key)方法访问其值'
myd.get('a')
# ---1
print(myd.get('e'))
#---- None 如果key不存在则返回None。

# Python字典(dict)的更改
'''
In [32]: myd = dict(a=1, b=2, c=3)

In [33]: myd['a'] = 9  # 改变某个键的值

In [34]: myd
Out[34]: {'a': 9, 'b': 2, 'c': 3}

In [35]: myd['e'] = 8  # 增加新的键值对

In [36]: myd
Out[36]: {'a': 9, 'b': 2, 'c': 3, 'e': 8}

In [37]: del myd['e']  # 删除某个键及其值

In [38]: myd
Out[38]: {'a': 9, 'b': 2, 'c': 3}

In [39]: myd.pop('c')  # 删除某个键及其值并得到其值
Out[39]: 3

In [40]: myd
Out[40]: {'a': 9, 'b': 2}
'''
# 第二天